/*
 * File: app/view/AccountRegistrationForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Sencha.view.AccountRegistrationForm', {
    extend: 'Ext.form.Panel',
    alias: 'widget.accountregistrationform',

    requires: [
        'Sencha.view.FormErrorState'
    ],

    frame: true,
    height: 250,
    width: 350,
    bodyBorder: true,
    bodyPadding: 10,
    title: 'Account Registration',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            defaults: {
                anchor: '100%',
                labelAlign: 'left',
                msgTarget: 'none',
                invalidCls: ''//unset the invalidCls so individual fields do not get styled as invalid
            },
            items: [
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    name: 'username',
                    fieldLabel: 'User Name',
                    allowBlank: false,
                    minLength: 6
                },
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    name: 'email',
                    fieldLabel: 'Email Address',
                    allowBlank: false,
                    vtype: 'email'
                },
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    style: 'margin-top:15px',
                    inputType: 'password',
                    name: 'password1',
                    fieldLabel: 'Password',
                    allowBlank: false
                },
                {
                    xtype: 'textfield',
                    validator: function(value) {
                        var password1 = this.previousSibling('[name=password1]');
                        return (value === password1.getValue()) ? true : 'Passwords do not match.';
                    },
                    anchor: '100%',
                    inputType: 'password',
                    name: 'password2',
                    fieldLabel: 'Repeat Password',
                    allowBlank: false
                },
                {
                    xtype: 'checkboxfield',
                    getErrors: function() {
                        return this.getValue() ? [] : ['You must accept the Terms of Use'];
                    },
                    listeners: {
                        click: {
                            element: 'boxLabelEl',
                            fn: function(e) {
                                    var target = e.getTarget('.terms'),
                                        win;
                                    
                                    e.preventDefault();
                                    
                                    var checkbox = Ext.ComponentQuery.query('checkboxfield[name=acceptTerms]')[0];
                                    
                                    if (target) {
                                        checkbox.fireEvent('boxLabelClick');
                                    }
                                }
                        }
                    },
                    style: 'margin-top:15px',
                    name: 'acceptTerms',
                    fieldLabel: 'Terms of Use',
                    hideLabel: true,
                    boxLabel: 'I have read and accept the <a href="#" class="terms">Terms of Use</a>.'
                }
            ],
            dockedItems: [
                {
                    xtype: 'container',
                    dock: 'bottom',
                    layout: {
                        align: 'middle',
                        padding: '10 10 5',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'formErrorState',
                            flex: 1
                        },
                        {
                            xtype: 'button',
                            action: 'submit',
                            flex: 1,
                            formBind: true,
                            disabled: true,
                            width: 140,
                            text: 'Submit Registration'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }

});